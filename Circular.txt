class Node :
    def __init__(self,data):
        self.data = data
        self.next= None
class Circular:
    def __init__(self):
        self.head = None
    def append(self,new_data):
        if not self.head:
            self.head= Node(new_data)
            self.head.next = self.head
        else:
            new_node = Node(new_data)
            cur = self.head
            while cur.next!=self.head:
                cur = cur.next
            cur.next = new_node
            new_node.next = self.head

    def prepend(self,new_data):

        temp = self.head
        new_node = Node(new_data)
        new_node.next = self.head
        if not self.head :
            new_node.next= new_node
        else:
            while temp.next != self.head:
                temp = temp.next
            temp.next = new_node
        self.head = new_node

    def delete(self,position):

        if position == 0:

            self.head = temp.next
            temp = None
            return

        temp = self.head
        for i in range(position-1):
            temp= temp.next
        next= temp.next.next
        temp.next =None
        temp.next = next









    def printList(self):
        temp = self.head
        while(temp):

            print(temp.data, end= " ")
            temp = temp.next

            if temp == self.head:
                break

if __name__ == "__main__":

    llist = Circular()
    llist.append(10)
    llist.append(20)
    llist.append(30)
    llist.append(40)
    llist.prepend(9)
    llist.prepend(8)
    llist.prepend(7)
    llist.prepend(6)
    llist.delete(2)
    llist.delete(3)
    llist.printList()
